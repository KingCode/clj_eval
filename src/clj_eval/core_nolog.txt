;; paste my-eval fn into the code input form at:
;; 
(defn my-eval [env exp]
    (letfn [(eval-list [env [op & args :as exp]]
                (if (= 'let op)
                    (eval-let env exp)
                    (let [ vargs (vec (map #(my-eval env %) args))]
                        (condp = op
                            'if (if (vargs 0) (vargs 1) (vargs 2))

                            'do (do (doall vargs) 
                                    (last vargs))

                            (let [op (my-eval env op)]
                                (if (fn? op) (apply op vargs)
                                    (cons op vargs)))))))

            (eval-let [env [_ bindings & body]]
              (->> (apply list 'do body)
                   (my-eval (letbind>env bindings env))))
              
            (letbind>env [letbind env]
                (->>(partition 2 letbind) 
                (reduce (fn [env [k v]] 
                            (assoc env k (my-eval env v))) env))) ] 
  (cond 
     (symbol? exp) (get env exp exp)
     (seq? exp) (eval-list env exp)
     (map? exp) (into (empty exp) (map (fn [[k v]] [(my-eval env k),(my-eval env v)])) exp)
     (coll? exp) (into (empty exp) (map #(my-eval env %) exp))
     :else exp)))
